@page "/socios"
@rendermode InteractiveServer

@using Modelo
@using Microsoft.AspNetCore.Components.Forms
@inject Web.Services.SocioService SocioService
@inject Microsoft.JSInterop.IJSRuntime JS

<h3 class="mb-3">Socios</h3>

@if (!string.IsNullOrEmpty(error))
{
    <div class="alert alert-danger">@error</div>
}

<!-- Formulario Alta/Edición -->
<div class="card mb-4" style="max-width: 980px;">
    <div class="card-header d-flex justify-content-between align-items-center">
        <strong>@(editMode ? $"Editar socio (Id: {form.IdSocio})" : "Nuevo socio")</strong>
        <div class="d-flex gap-2">
            <button type="button" class="btn btn-sm btn-secondary" @onclick="Cancelar" disabled="@guardando">Cancelar</button>
            <button type="button" class="btn btn-sm btn-primary" @onclick="Guardar" disabled="@guardando">
                @(guardando ? "Guardando..." : (editMode ? "Actualizar" : "Guardar"))
            </button>
        </div>
    </div>

    <div class="card-body">
        @if (!string.IsNullOrEmpty(formMsg))
        {
            <div class="alert @(formOk ? "alert-success" : "alert-warning")">@formMsg</div>
        }

        <div class="row g-3">
            <div class="col-md-6">
                <label class="form-label">Nombre y Apellido *</label>
                <input class="form-control" @bind="form.NombreYApellido" @bind:event="oninput" />
            </div>

            <div class="col-md-3">
                <label class="form-label">N° Documento *</label>
                <input class="form-control" type="number" @bind="form.NroDocumento" />
            </div>

            <div class="col-md-3">
                <label class="form-label">Género *</label>
                <select class="form-select" @bind="form.Genero">
                    <option value="">(Seleccione)</option>
                    <option>Masculino</option>
                    <option>Femenino</option>
                    <option>Otro</option>
                </select>
            </div>

            <div class="col-md-3">
                <label class="form-label">Fecha Nacimiento</label>
                <InputDate @bind-Value="form.FechaNacimiento" class="form-control" />
            </div>

            <div class="col-md-3">
                <label class="form-label">Plan *</label>

                <InputRadioGroup TValue="string" @bind-Value="form.Plan" class="d-flex align-items-center gap-4 pt-2">
                    <div class="form-check">
                        <InputRadio TValue="string" class="form-check-input" Value="@("Mensual")" id="planMensual" />
                        <label class="form-check-label" for="planMensual">Mensual</label>
                    </div>
                    <div class="form-check">
                        <InputRadio TValue="string" class="form-check-input" Value="@("Anual")" id="planAnual" />
                        <label class="form-check-label" for="planAnual">Anual</label>
                    </div>
                </InputRadioGroup>
            </div>

            <div class="col-md-3">
                <label class="form-label">Teléfono</label>
                <input class="form-control" @bind="form.Telefono" @bind:event="oninput" />
            </div>

            <div class="col-md-3">
                <label class="form-label">Email</label>
                <input class="form-control" type="email" @bind="form.Email" @bind:event="oninput" />
            </div>

            <div class="col-md-4">
                <label class="form-label">Ciudad</label>
                <input class="form-control" @bind="form.Ciudad" @bind:event="oninput" />
            </div>

            <div class="col-md-8">
                <label class="form-label">Dirección</label>
                <input class="form-control" @bind="form.Direccion" @bind:event="oninput" />
            </div>

            <div class="col-md-4">
                <label class="form-label">Obra Social</label>
                <input class="form-control" @bind="form.ObraSocial" @bind:event="oninput" />
            </div>

            @if (editMode)
            {
                <div class="col-md-4">
                    <label class="form-label">Estado</label>
                    <input class="form-control" value="@form.EstadoSocio" disabled />
                </div>
            }
        </div>

        <hr class="my-4" />

        <div class="row g-3">
            <div class="col-12">
                <label class="form-label">Días de asistencia *</label>
                <div class="d-flex flex-wrap gap-4">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="dLunes" @bind="_dLunes" />
                        <label class="form-check-label" for="dLunes">Lunes</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="dMartes" @bind="_dMartes" />
                        <label class="form-check-label" for="dMartes">Martes</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="dMierc" @bind="_dMiercoles" />
                        <label class="form-check-label" for="dMierc">Miércoles</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="dJueves" @bind="_dJueves" />
                        <label class="form-check-label" for="dJueves">Jueves</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="dViernes" @bind="_dViernes" />
                        <label class="form-check-label" for="dViernes">Viernes</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="dSabado" @bind="_dSabado" />
                        <label class="form-check-label" for="dSabado">Sábado</label>
                    </div>
                </div>
                <small class="text-muted">Debés seleccionar al menos un día.</small>
            </div>
        </div>

        <small class="text-muted d-block mt-3">(*) Campos obligatorios</small>
    </div>
</div>

<!-- Lista -->
@if (cargando)
{
    <div class="alert alert-info">Cargando…</div>
}
else if (lista is null || lista.Count == 0)
{
    <div class="alert alert-warning">No hay socios.</div>
}
else
{
    <div class="d-flex justify-content-between align-items-center mb-2">
        <div class="text-muted">Total: <strong>@lista.Count</strong></div>
        <button class="btn btn-sm btn-outline-primary" @onclick="Nuevo" disabled="@guardando">Nuevo</button>
    </div>

    <table class="table table-striped table-hover">
        <thead class="table-light">
            <tr>
                <th style="width: 80px;">Id</th>
                <th>Nombre y Apellido</th>
                <th>Email</th>
                <th>Estado</th>
                <th style="width: 220px;" class="text-end">Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var s in lista)
            {
                <tr>
                    <td>@s.IdSocio</td>
                    <td>@s.NombreYApellido</td>
                    <td>@s.Email</td>
                    <td>@s.EstadoSocio</td>
                    <td class="text-end">
                        <button type="button" class="btn btn-sm btn-outline-secondary me-2"
                                @onclick="() => Editar(s.IdSocio)" disabled="@guardando">
                            Editar
                        </button>

                        <button type="button" class="btn btn-sm btn-outline-danger"
                                disabled="@(eliminando.Contains(s.IdSocio))"
                                @onclick="() => Eliminar(s.IdSocio)">
                            @(eliminando.Contains(s.IdSocio) ? "Eliminando..." : "Eliminar")
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    // --------- estado ---------
    List<Socio> lista = new();
    Socio form = NuevaInstancia();
    bool editMode = false;
    bool cargando = true;
    bool guardando = false;
    string error = "";
    string formMsg = "";
    bool formOk = false;
    HashSet<int> eliminando = new();

    // días (checkboxes)
    bool _dLunes, _dMartes, _dMiercoles, _dJueves, _dViernes, _dSabado;

    static Socio NuevaInstancia() => new Socio
        {
            Rutinas = new List<Rutina>(),
            NombreYApellido = "",
            Genero = "",
            Ciudad = "",
            Direccion = "",
            Telefono = "",
            Email = "",
            ObraSocial = "",
            Plan = "",
            // FechaNacimiento queda default hasta que el usuario elija
        };

    // --------- ciclo de vida ---------
    protected override async Task OnInitializedAsync()
    {
        await CargarLista();
    }

    // setear checkboxes de días desde form.Rutinas (al editar)
    void SetDiasDesdeRutinas()
    {
        var dias = (form.Rutinas ?? new List<Rutina>()).Select(r => r.Dia?.Trim().ToLower()).ToHashSet();

        _dLunes = dias.Contains("lunes");
        _dMartes = dias.Contains("martes");
        _dMiercoles = dias.Contains("miércoles") || dias.Contains("miercoles");
        _dJueves = dias.Contains("jueves");
        _dViernes = dias.Contains("viernes");
        _dSabado = dias.Contains("sábado") || dias.Contains("sabado");
    }

    // construir Rutinas desde los checkboxes (al guardar)
    List<Rutina> BuildRutinasDesdeDias()
    {
        var r = new List<Rutina>();
        void add(bool flag, string dia)
        {
            if (flag)
                r.Add(new Rutina { Dia = dia, FechaModificacion = DateTime.Now });
        }
        add(_dLunes, "Lunes");
        add(_dMartes, "Martes");
        add(_dMiercoles, "Miércoles");
        add(_dJueves, "Jueves");
        add(_dViernes, "Viernes");
        add(_dSabado, "Sábado");
        return r;
    }

    void LimpiarDias()
    {
        _dLunes = _dMartes = _dMiercoles = _dJueves = _dViernes = _dSabado = false;
    }

    // --------- acciones ---------
    async Task CargarLista()
    {
        try
        {
            cargando = true; error = "";
            lista = await Task.Run(() => SocioService.Listar());
        }
        catch (Exception ex)
        {
            error = "No se pudieron cargar los socios. " + ex.Message;
            lista = new();
        }
        finally
        {
            cargando = false;
            StateHasChanged();
        }
    }

    void Nuevo()
    {
        form = NuevaInstancia();
        editMode = false;
        formMsg = ""; formOk = false;
        LimpiarDias();
        form.Plan = ""; // limpia selección de plan (InputRadioGroup)
    }

    async Task Editar(int id)
    {
        try
        {
            formMsg = ""; formOk = false;
            var socio = await Task.Run(() => SocioService.Get(id));
            if (socio is null)
            {
                await JS.InvokeVoidAsync("alert", "No se pudo cargar el socio.");
                return;
            }
            form = socio;
            form.Rutinas ??= new List<Rutina>();
            editMode = true;

            // setear UI según datos existentes
            SetDiasDesdeRutinas(); // radios se marcan solos por @bind a form.Plan
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "Error al cargar socio: " + ex.Message);
        }
    }

    bool ValidarFormulario(out string msg)
    {
        if (string.IsNullOrWhiteSpace(form.NombreYApellido))
        { msg = "Nombre y Apellido es obligatorio."; return false; }

        if (form.NroDocumento <= 0)
        { msg = "N° Documento es obligatorio."; return false; }

        if (string.IsNullOrWhiteSpace(form.Plan))
        { msg = "Plan es obligatorio (Mensual o Anual)."; return false; }

        // al menos un día
        var alguno = _dLunes || _dMartes || _dMiercoles || _dJueves || _dViernes || _dSabado;
        if (!alguno)
        { msg = "Debe seleccionar al menos un día de asistencia."; return false; }

        msg = "";
        return true;
    }

    async Task Guardar()
    {
        if (!ValidarFormulario(out var vmsg))
        {
            formOk = false; formMsg = vmsg;
            return;
        }

        // construir Rutinas desde checkboxes
        form.Rutinas = BuildRutinasDesdeDias();

        guardando = true;
        formOk = false; formMsg = "";
        try
        {
            if (!editMode)
            {
                // ALTA
                string msg = string.Empty;
                var id = await Task.Run(() => SocioService.Registrar(form, out msg));
                formMsg = string.IsNullOrEmpty(msg) ? "" : msg;

                if (id > 0)
                {
                    formOk = true;
                    await CargarLista();
                    form = NuevaInstancia();
                    LimpiarDias();
                    form.Plan = "";
                }
                else
                {
                    formOk = false;
                    if (string.IsNullOrEmpty(formMsg)) formMsg = "No se pudo registrar.";
                }
            }
            else
            {
                // MODIFICACIÓN
                string msg = string.Empty;
                var ok = await Task.Run(() => SocioService.Actualizar(form, out msg));
                formMsg = string.IsNullOrEmpty(msg) ? "" : msg;

                if (ok)
                {
                    formOk = true;
                    await CargarLista();
                }
                else
                {
                    formOk = false;
                    if (string.IsNullOrEmpty(formMsg)) formMsg = "No se pudo actualizar.";
                }
            }
        }
        catch (Exception ex)
        {
            formOk = false;
            formMsg = "Error al guardar: " + ex.Message;
        }
        finally
        {
            guardando = false;
            StateHasChanged();
        }
    }

    void Cancelar()
    {
        form = NuevaInstancia();
        editMode = false;
        formMsg = ""; formOk = false;
        LimpiarDias();
        form.Plan = "";
    }

    async Task Eliminar(int id)
    {
        var confirmar = await JS.InvokeAsync<bool>("confirm", $"¿Eliminar el socio {id}?");
        if (!confirmar) return;

        eliminando.Add(id);
        StateHasChanged();

        try
        {
            string msg = string.Empty;
            var ok = await Task.Run(() => SocioService.Eliminar(id, out msg));
            if (!ok)
            {
                await JS.InvokeVoidAsync("alert", $"No se pudo eliminar: {msg}");
                return;
            }
            await CargarLista();
        }
        finally
        {
            eliminando.Remove(id);
            StateHasChanged();
        }
    }
}
